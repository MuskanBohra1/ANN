# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vq2Ig8aY1II4z3fB-H2Xb1VPQx6CMHvU
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import shap
import joblib
from tensorflow.keras.models import load_model
from sklearn.preprocessing import StandardScaler

# Load Data
@st.cache_data
def load_data():
    df = pd.read_csv("Telco-Customer-Churn.csv")
    df.drop(['customerID'], axis=1, inplace=True)
    df['Churn'] = df['Churn'].apply(lambda x: 1 if x == 'Yes' else 0)
    df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
    df.fillna(df.median(), inplace=True)
    return df

df = load_data()

# Load Pre-trained Model and Scaler
model = load_model("ann_churn_model.h5")
scaler = joblib.load("scaler.pkl")

# Sidebar - Page Navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["Data Overview", "EDA", "Churn Prediction", "Explainability"])

# Page 1: Data Overview
if page == "Data Overview":
    st.title("ðŸ“Š Data Overview")
    st.write(df.head())
    st.write("### Missing Values")
    st.write(df.isnull().sum())

    # Summary Statistics
    st.write("### Dataset Summary")
    st.write(df.describe())

# Page 2: Exploratory Data Analysis (EDA)
elif page == "EDA":
    st.title("ðŸ“ˆ Exploratory Data Analysis")

    # Churn Distribution
    st.subheader("Churn Distribution")
    fig, ax = plt.subplots()
    sns.countplot(x=df['Churn'], palette='coolwarm', ax=ax)
    st.pyplot(fig)

    # Monthly Charges vs Churn
    st.subheader("Monthly Charges vs. Churn")
    fig, ax = plt.subplots()
    sns.boxplot(x=df['Churn'], y=df['MonthlyCharges'], palette='coolwarm', ax=ax)
    st.pyplot(fig)

    # Tenure vs Churn
    st.subheader("Tenure Distribution by Churn")
    fig, ax = plt.subplots()
    sns.histplot(df[df['Churn']==1]['tenure'], bins=30, kde=True, color='red', label='Churned', ax=ax)
    sns.histplot(df[df['Churn']==0]['tenure'], bins=30, kde=True, color='blue', label='Retained', ax=ax)
    plt.legend()
    st.pyplot(fig)

# Page 3: Churn Prediction
elif page == "Churn Prediction":
    st.title("ðŸ”® Churn Prediction")
    st.write("Enter customer details to predict churn probability.")

    # User Inputs
    tenure = st.slider("Tenure (Months)", 0, 72, 24)
    monthly_charges = st.number_input("Monthly Charges", 0, 150, 50)
    total_charges = tenure * monthly_charges
    contract = st.selectbox("Contract Type", ["Month-to-month", "One year", "Two year"])

    # Encoding Inputs
    contract_encoded = [1, 0] if contract == "One year" else ([0, 1] if contract == "Two year" else [0, 0])

    # Prepare input for model
    input_data = np.array([[tenure, monthly_charges, total_charges] + contract_encoded])
    input_scaled = scaler.transform(input_data)

    # Predict
    if st.button("Predict Churn"):
        prediction = model.predict(input_scaled)[0][0]
        st.write("### Churn Probability: {:.2f}%".format(prediction * 100))
        if prediction > 0.5:
            st.error("Customer is likely to churn! Consider retention strategies.")
        else:
            st.success("Customer is likely to stay.")

# Page 4: Explainability with SHAP
elif page == "Explainability":
    st.title("ðŸ“¢ SHAP Explainability")
    st.write("Understanding feature impact on churn prediction.")

    explainer = shap.Explainer(model, df.drop(columns=['Churn']))
    shap_values = explainer(df.drop(columns=['Churn']))

    # SHAP Summary Plot
    st.subheader("SHAP Summary Plot")
    fig, ax = plt.subplots()
    shap.summary_plot(shap_values, df.drop(columns=['Churn']), show=False)
    st.pyplot(fig)

    # SHAP Bar Plot
    st.subheader("SHAP Feature Importance")
    fig, ax = plt.subplots()
    shap.bar_plot(shap_values, show=False)
    st.pyplot(fig)